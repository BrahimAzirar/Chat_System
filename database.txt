create database ChatSystem;
use ChatSystem;

drop database ChatSystem;

create table Users (
    UserId int PRIMARY KEY not null AUTO_INCREMENT,
    FirstName varchar(15) not null,
    LastName varchar(15) not null, 
    Thel varchar(20) not null,
    Email varchar(40) not null,
    _Password varchar(20) not null,
    _Profile longtext not null,
    _Admin boolean not null
);

create table FriendsList (
	UserId int not null,
	FriendId int not null,
    
    foreign key(UserId) references Users(UserId),
    foreign key(FriendId) references Users(UserId)
);

create table Posts (
	PostId int not null primary key auto_increment,
    UserId int not null,
    PostActicle longtext not null,
    PostData longtext null,
    PostDate datetime not null,
    
    foreign key(UserId) references Users(UserId)
);

create table FriendsRequests (
	UserId int not null,
	FriendId int not null,
    RequestDate date not null,
    
    foreign key(UserId) references Users(UserId),
    foreign key(FriendId) references Users(UserId)
);

create table Chat (
	UserId int not null,
	FriendId int not null,
    Message longtext not null,
    MessageDate datetime not null,
    
    foreign key(UserId) references Users(UserId),
    foreign key(FriendId) references Users(UserId)
);

create table Comments (
	PostId int not null,
    UserId int not null,
	_Comment longtext not null,
    
    foreign key(PostId) references Posts(PostId),
    foreign key(UserId) references Users(UserId)
);

create table Interaction (
	PostId int not null,
    UserId int not null,
	InteractionType varchar(10) not null,
    
    foreign key(PostId) references Posts(PostId),
    foreign key(UserId) references Users(UserId)
);

drop table Interaction;


select * from Users;
select * from Posts;
select * from FriendsList;
select * from Comments;
select * from Chat;
select * from FriendsRequests;
select * from Interaction;

select Message, MessageDate from Chat where MessageDate in (select max(MessageDate) from Chat where UserId = 1);

Delimiter $
create trigger handleInteractionTable before insert on Interaction for each row
begin
	if (select new.PostId in (select PostId from Interaction where UserId = new.UserId and InteractionType = new.InteractionType)) then
		SIGNAL SQLSTATE '45000' 
			SET MESSAGE_TEXT = 'Error: this data aready exist';
    end if;
end $
Delimiter ;



Delimiter $
create trigger OnDeletePost before delete on Posts for each row
begin
	delete from Interaction where PostId = old.PostId;
end $
Delimiter ;

drop trigger OnDeletePost;
show triggers;


Delimiter $
create procedure AcceptingFriend (userId int, friendId int)
begin
	declare exit handler for sqlexception
    begin
		rollback;
    end ;
    
    start transaction;
		delete from FriendsRequests where UserId = userId and FriendId = friendId;
        insert into FriendsList value(friendId, UserId);
        insert into FriendsList value(UserId, friendId);
    commit;
end $
Delimiter ;

show procedure status;
drop procedure AcceptingFriend;






